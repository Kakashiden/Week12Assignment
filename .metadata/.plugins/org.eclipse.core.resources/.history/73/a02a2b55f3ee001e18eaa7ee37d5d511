package com.promineotech;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;
import static org.junit.jupiter.params.provider.Arguments.arguments;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.spy;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.stream.Stream;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

class TestDemoJUnitTest {

private TestDemo testDemo;
	
	@BeforeEach
	void setUp() throws Exception {
		testDemo = new TestDemo();
	}

	@ParameterizedTest
	@MethodSource("com.promineotech.TestDemoJUnitTest#argumentsForAddPositive")
	void assertThatTwoPositiveNumbersAreAddedCorrectly(int a, int b, int expected, boolean expectException) {
	if(!expectException) {
		assertThat(testDemo.addPositive(a, b)).isEqualTo(expected);
	}else {
		assertThatThrownBy(() -> testDemo.addPositive(a, b)).isInstanceOf(IllegalArgumentException.class);
	}
	}

	static Stream<Arguments> argumentsForAddPositive(){ 
		//@formatter: off
		return Stream.of( 
		arguments(5, 4, 9, false),
		arguments(0, 2, 2, true),
		arguments ( -7, 7, 0, true),
		arguments(-6, -8,-14 , true)
		);
		//@formatter:on
	}
	
	
	static Stream<Arguments> argumentsForAverageOfArray() {
		double[] validArr = {7.5, 12.0, 25.75};
		double[] validArrWithNegative = {2.5, -10.0, 50.25};
		double[] emptyArr = {};
		
		return Stream.of(
				arguments(validArr, new BigDecimal(15.08).setScale(2, RoundingMode.HALF_DOWN), false),
				arguments(validArrWithNegative, new BigDecimal(14.25).setScale(2, RoundingMode.HALF_DOWN), false),
				arguments(emptyArr, new BigDecimal(0).setScale(2, RoundingMode.HALF_DOWN), true)
				);
	}
	
	
	
	
	@Test
	void assertThatNumberSquaredIsCorrect() {
		
		TestDemo mockDemo = spy(testDemo);
		doReturn(5).when(mockDemo).getRandomInt();
		int fiveSquared = mockDemo.randomNumberSquared();
		assertThat(fiveSquared).isEqualTo(25);
	}

}
